// // returns random value for single character ability using the same logic as specified in D&D Player's Handbook
// // roll four six-sided dice, sum three highest rolls (possible numbers 3 - 18)
// getAbility = () => {
//   const abilities = [];
//   for(let i = 0; i < 4; i++) {
//     abilities.push(Math.floor(Math.random() * 6) + 1);
//   }
//   console.log(abilities);
//
//   abilities.sort((a, b) => b - a);
//
//   console.log(abilities);
//
//   let ability = abilities[0] + abilities[1] + abilities[2];
//
//   console.log(ability);
//
//   return ability;
// }
//
// // returns array of six abilities in descending order to be used in random character generation as specified in D&D Player's Handbook
// // abilities randomly generated by getAbility function, so possible return values is array with six numbers each from 3 - 18 inclusive
// getAbilities = () => {
//   const abilities = [];
//
//   for(let i = 0; i < 6; i++) {
//     abilities.push(getAbility());
//   }
//
//   console.log(abilities);
//   abilities.sort((a, b) => b - a);
//   console.log(abilities);
// }
//
// getAbilities();


switch (charClass) {
  case 0: //barbarian
    abilities[0] = abilityChoices[0];
    abilities[1] = abilityChoices[2];
    abilities[2] = abilityChoices[1];
    abilities[3] = abilityChoices[5];
    abilities[4] = abilityChoices[4];
    abilities[5] = abilityChoices[3];
    break;
  case 1: //bard
    abilities[0] = abilityChoices[5];
    abilities[1] = abilityChoices[1];
    abilities[2] = abilityChoices[2];
    abilities[3] = abilityChoices[4];
    abilities[4] = abilityChoices[3];
    abilities[5] = abilityChoices[0];
    break;
  case 2: //cleric
    abilities[0] = abilityChoices[1];
    abilities[1] = abilityChoices[3];
    abilities[2] = abilityChoices[2];
    abilities[3] = abilityChoices[5];
    abilities[4] = abilityChoices[0];
    abilities[5] = abilityChoices[4];
    break;
  case 3: //druid
    abilities[0] = abilityChoices[4];
    abilities[1] = abilityChoices[5];
    abilities[2] = abilityChoices[1];
    abilities[3] = abilityChoices[2];
    abilities[4] = abilityChoices[0];
    abilities[5] = abilityChoices[3];
    break;
  case 4: //fighter
    abilities[0] = abilityChoices[0];
    abilities[1] = abilityChoices[2];
    abilities[2] = abilityChoices[1];
    abilities[3] = abilityChoices[3];
    abilities[4] = abilityChoices[4];
    abilities[5] = abilityChoices[5];
    break;
  case 5: //monk
    abilities[0] = abilityChoices[3];
    abilities[1] = abilityChoices[0];
    abilities[2] = abilityChoices[2];
    abilities[3] = abilityChoices[5];
    abilities[4] = abilityChoices[1];
    abilities[5] = abilityChoices[4];
    break;
  case 6: //paladin
    abilities[0] = abilityChoices[0];
    abilities[1] = abilityChoices[3];
    abilities[2] = abilityChoices[2];
    abilities[3] = abilityChoices[5];
    abilities[4] = abilityChoices[4];
    abilities[5] = abilityChoices[1];
    break;
  case 7: //ranger
    abilities[0] = abilityChoices[2];
    abilities[1] = abilityChoices[0];
    abilities[2] = abilityChoices[3];
    abilities[3] = abilityChoices[5];
    abilities[4] = abilityChoices[1];
    abilities[5] = abilityChoices[4];
    break;
  case 8: //rogue
    abilities[0] = abilityChoices[4];
    abilities[1] = abilityChoices[0];
    abilities[2] = abilityChoices[3];
    abilities[3] = abilityChoices[1];
    abilities[4] = abilityChoices[5];
    abilities[5] = abilityChoices[2];
    break;
  case 9: //sorcerer
    abilities[0] = abilityChoices[5];
    abilities[1] = abilityChoices[3];
    abilities[2] = abilityChoices[1];
    abilities[3] = abilityChoices[2];
    abilities[4] = abilityChoices[4];
    abilities[5] = abilityChoices[0];
    break;
  case 10: //warlock
    abilities[0] = abilityChoices[3];
    abilities[1] = abilityChoices[2];
    abilities[2] = abilityChoices[1];
    abilities[3] = abilityChoices[4];
    abilities[4] = abilityChoices[5];
    abilities[5] = abilityChoices[0];
    break;
  case 11: //wizard
    abilities[0] = abilityChoices[5];
    abilities[1] = abilityChoices[2];
    abilities[2] = abilityChoices[1];
    abilities[3] = abilityChoices[0];
    abilities[4] = abilityChoices[4];
    abilities[5] = abilityChoices[3];
    break;
}

switch (race) {
  case 0: //dwarf
    abilities[2] += 2;
    break;
  case 1: //elf
    abilities[1] += 2;
    break;
  case 2: //halfling
    abilities[1] += 2;
    break;
  case 3: //human
    abilities[0] += 1;
    abilities[1] += 1;
    abilities[2] += 1;
    abilities[3] += 1;
    abilities[4] += 1;
    abilities[5] += 1;
    break;
  case 4: //dragonborn
    abilities[0] += 2;
    abilities[5] += 1;
    break;
  case 5: //gnome
    abilities[3] += 2;
    break;
  case 6: //half-elf
    abilities[5] += 2;
    break;
  case 7: //half-orc
    abilities[0] += 2;
    abilities[2] += 1;
    break;
  case 8: //tiefling
    abilities[3] += 1;
    abilities[5] += 2;
    break;
  }

  console.log(character);
  return character;
}
