// arrays for use with parsing indexes from database to string names and vice-versa
const races = [
  "Dwarf",
  "Elf",
  "Halfling",
  "Human",
  "Dragonborn",
  "Gnome",
  "Half-Elf",
  "Half-Orc",
  "Tiefling"
];
const charClasses = [
  "Barbarian",
  "Bard",
  "Cleric",
  "Druid",
  "Fighter",
  "Monk",
  "Paladin",
  "Ranger",
  "Rogue",
  "Sorcerer",
   "Warlock",
   "Wizard"
];

class Character {
  constructor(name, race, charClass, abilities) {
    this.name = "";
    this.race  = race;
    this.charClass = charClass;
    this. abilities = abilities;
  }
// returns random value for single character ability using the same logic as specified in D&D Player's Handbook
// roll four six-sided dice, sum three highest rolls (possible numbers 3 - 18)
const getAbility = () => {
  const abilities = [];

  for(let i = 0; i < 4; i++) {
    abilities.push(Math.floor(Math.random() * 6) + 1);
  }

  abilities.sort((a, b) => b - a);

  return abilities[0] + abilities[1] + abilities[2];
}

// returns array of six abilities in descending order to be used in random character generation as specified in D&D Player's Handbook
// abilities randomly generated by getAbility function, so possible return values is array with six numbers each from 3 - 18 inclusive
const getAbilities = () => {
  console.log('getting abilities');
  const abilities = [];

  for(let i = 0; i < 6; i++) {
    abilities.push(getAbility());
  }
  abilities.sort((a, b) => b - a);
  console.log(abilities);
  return abilities;
}


const updateCharacter = (race, charClass) => {
  console.log('updating character');
  const abilityChoices = getAbilities();
  console.log(`ability choices: ${abilityChoices}`);
  const abilities = [];

  switch (charClass) {
    case 0: //barbarian
      abilities[0] = abilityChoices[0];
      abilities[1] = abilityChoices[2];
      abilities[2] = abilityChoices[1];
      abilities[3] = abilityChoices[5];
      abilities[4] = abilityChoices[4];
      abilities[5] = abilityChoices[3];
      break;
    case 1: //bard
      abilities[0] = abilityChoices[5];
      abilities[1] = abilityChoices[1];
      abilities[2] = abilityChoices[2];
      abilities[3] = abilityChoices[4];
      abilities[4] = abilityChoices[3];
      abilities[5] = abilityChoices[0];
      break;
    case 2: //cleric
      abilities[0] = abilityChoices[1];
      abilities[1] = abilityChoices[3];
      abilities[2] = abilityChoices[2];
      abilities[3] = abilityChoices[5];
      abilities[4] = abilityChoices[0];
      abilities[5] = abilityChoices[4];
      break;
    case 3: //druid
      abilities[0] = abilityChoices[4];
      abilities[1] = abilityChoices[5];
      abilities[2] = abilityChoices[1];
      abilities[3] = abilityChoices[2];
      abilities[4] = abilityChoices[0];
      abilities[5] = abilityChoices[3];
      break;
    case 4: //fighter
      abilities[0] = abilityChoices[0];
      abilities[1] = abilityChoices[2];
      abilities[2] = abilityChoices[1];
      abilities[3] = abilityChoices[3];
      abilities[4] = abilityChoices[4];
      abilities[5] = abilityChoices[5];
      break;
    case 5: //monk
      abilities[0] = abilityChoices[3];
      abilities[1] = abilityChoices[0];
      abilities[2] = abilityChoices[2];
      abilities[3] = abilityChoices[5];
      abilities[4] = abilityChoices[1];
      abilities[5] = abilityChoices[4];
      break;
    case 6: //paladin
      abilities[0] = abilityChoices[0];
      abilities[1] = abilityChoices[3];
      abilities[2] = abilityChoices[2];
      abilities[3] = abilityChoices[5];
      abilities[4] = abilityChoices[4];
      abilities[5] = abilityChoices[1];
      break;
    case 7: //ranger
      abilities[0] = abilityChoices[2];
      abilities[1] = abilityChoices[0];
      abilities[2] = abilityChoices[3];
      abilities[3] = abilityChoices[5];
      abilities[4] = abilityChoices[1];
      abilities[5] = abilityChoices[4];
      break;
    case 8: //rogue
      abilities[0] = abilityChoices[4];
      abilities[1] = abilityChoices[0];
      abilities[2] = abilityChoices[3];
      abilities[3] = abilityChoices[1];
      abilities[4] = abilityChoices[5];
      abilities[5] = abilityChoices[2];
      break;
    case 9: //sorcerer
      abilities[0] = abilityChoices[5];
      abilities[1] = abilityChoices[3];
      abilities[2] = abilityChoices[1];
      abilities[3] = abilityChoices[2];
      abilities[4] = abilityChoices[4];
      abilities[5] = abilityChoices[0];
      break;
    case 10: //warlock
      abilities[0] = abilityChoices[3];
      abilities[1] = abilityChoices[2];
      abilities[2] = abilityChoices[1];
      abilities[3] = abilityChoices[4];
      abilities[4] = abilityChoices[5];
      abilities[5] = abilityChoices[0];
      break;
    case 11: //wizard
      abilities[0] = abilityChoices[5];
      abilities[1] = abilityChoices[2];
      abilities[2] = abilityChoices[1];
      abilities[3] = abilityChoices[0];
      abilities[4] = abilityChoices[4];
      abilities[5] = abilityChoices[3];
      break;
  }

  console.log(`abilities after class update: ${abilities}`);

  switch (race) {
    case 0: //dwarf
      abilities[2] += 2;
      break;
    case 1: //elf
      abilities[1] += 2;
      break;
    case 2: //halfling
      abilities[1] += 2;
      break;
    case 3: //human
      abilities[0] += 1;
      abilities[1] += 1;
      abilities[2] += 1;
      abilities[3] += 1;
      abilities[4] += 1;
      abilities[5] += 1;
      break;
    case 4: //dragonborn
      abilities[0] += 2;
      abilities[5] += 1;
      break;
    case 5: //gnome
      abilities[3] += 2;
      break;
    case 6: //half-elf
      abilities[5] += 2;
      break;
    case 7: //half-orc
      abilities[0] += 2;
      abilities[2] += 1;
      break;
    case 8: //tiefling
      abilities[3] += 1;
      abilities[5] += 2;
      break;
    }

    console.log(`abilities finished: ${abilities}`);
    return abilities;
  }
}

export { races, charClasses, getAbility, getAbilities, updateCharacter };

// const getRaceName = (index) => {
//   return
//   // switch (index) {
//   //   case 0: return "Dwarf";
//   //   case 1: return "Elf";
//   //   case 2: return "Halfling";
//   //   case 3: return "Human";
//   //   case 4: return "Dragonborn";
//   //   case 5: return "Gnome";
//   //   case 6: return "Half-Elf";
//   //   case 7: return "Half-Orc";
//   //   case 8: return "Tiefling";
//   // }
// }

// const getClassName = (index) => {
//   switch (index) {
//     case 0: return "Barbarian"
//     case 1: return "Bard"
//     case 2: return "Cleric"
//     case 3: return "Druid"
//     case 4: return "Fighter"
//     case 5: return "Monk"
//     case 6: return "Paladin"
//     case 7: return "Ranger"
//     case 8: return "Rogue"
//     case 9: return "Sorcerer"
//     case 10: return "Warlock"
//     case 11: return "Wizard"
//   }
// }

// # Race.create([
// #   { name: "Dwarf",      ability_buff: [0,0,2,0,0,0],    speed: 25, size: "Medium" },
// #   { name: "Elf",        ability_buff: [0,2,0,0,0,0],    speed: 30, size: "Medium" },
// #   { name: "Halfling",   ability_buff: [0,2,0,0,0,0],    speed: 25, size: "Small" },
// #   { name: "Human",      ability_buff: [1,1,1,1,1,1],    speed: 30, size: "Medium" },
// #   { name: "Dragonborn", ability_buff: [2,0,0,0,0,1],    speed: 30, size: "Medium" },
// #   { name: "Gnome",      ability_buff: [0,0,0,2,0,0],    speed: 30, size: "Small" },
// #   { name: "Half-Elf",   ability_buff: [0,0,0,0,0,2,-1], speed: 30, size: "Medium" },
// #   { name: "Half-Orc",   ability_buff: [2,0,1,0,0,0],    speed: 30, size: "Medium" },
// #   { name: "Tiefling",   ability_buff: [0,0,0,1,0,2],    speed: 30, size: "Medium" }
// # ])
// #
// # p "Creating clases..."
// #
// # CharClass.create([
// #   { name: "Barbarian",  modifier: 12, primary_abilities: [0,2] },
// #   { name: "Bard",       modifier: 8,  primary_abilities: [5,1] },
// #   { name: "Cleric",     modifier: 8,  primary_abilities: [4,0] },
// #   { name: "Druid",      modifier: 8,  primary_abilities: [4,2] },
// #   { name: "Fighter",    modifier: 10, primary_abilities: [0,2] },
// #   { name: "Monk",       modifier: 8,  primary_abilities: [1,4] },
// #   { name: "Paladin",    modifier: 10, primary_abilities: [0,5] },
// #   { name: "Ranger",     modifier: 10, primary_abilities: [1,4] },
// #   { name: "Rogue",      modifier: 8,  primary_abilities: [1,3] },
// #   { name: "Sorcerer",   modifier: 6,  primary_abilities: [5,2] },
// #   { name: "Warlock",    modifier: 8,  primary_abilities: [5,2] },
// #   { name: "Wizard",     modifier: 6,  primary_abilities: [3,2] }
